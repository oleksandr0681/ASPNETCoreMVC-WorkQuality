// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkQuality.Models;

#nullable disable

namespace WorkQuality.Migrations
{
    [DbContext(typeof(WorkQualityDbContext))]
    partial class WorkQualityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkQuality.Models.Criterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("PriorityCoefficient")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Criteria");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Технічні знання і навички",
                            PriorityCoefficient = 1.0
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Спроможність застосовувати знання",
                            PriorityCoefficient = 1.0
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Якість роботи",
                            PriorityCoefficient = 1.0
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Продуктивність",
                            PriorityCoefficient = 1.0
                        },
                        new
                        {
                            Id = 5,
                            Description = "Командна робота та комунікативні навички.",
                            Name = "Командна робота",
                            PriorityCoefficient = 1.0
                        });
                });

            modelBuilder.Entity("WorkQuality.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WorkQuality.Models.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("WorkQuality.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("WorkQuality.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationId")
                        .HasColumnType("int");

                    b.Property<int>("QualityScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("ExaminationId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("WorkQuality.Models.Criterion", b =>
                {
                    b.HasOne("WorkQuality.Models.Job", null)
                        .WithMany("Criteria")
                        .HasForeignKey("JobId");
                });

            modelBuilder.Entity("WorkQuality.Models.Employee", b =>
                {
                    b.HasOne("WorkQuality.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WorkQuality.Models.Examination", b =>
                {
                    b.HasOne("WorkQuality.Models.Employee", "Employee")
                        .WithMany("Examinations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WorkQuality.Models.Score", b =>
                {
                    b.HasOne("WorkQuality.Models.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkQuality.Models.Examination", "Examination")
                        .WithMany("Scores")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("WorkQuality.Models.Employee", b =>
                {
                    b.Navigation("Examinations");
                });

            modelBuilder.Entity("WorkQuality.Models.Examination", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("WorkQuality.Models.Job", b =>
                {
                    b.Navigation("Criteria");
                });
#pragma warning restore 612, 618
        }
    }
}
